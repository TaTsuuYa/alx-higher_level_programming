>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> mat = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]
>>> matrix_divided(mat, 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]

>>> matrix_divided(mat, 2.0)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]

>>> matrix_divided(mat)
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided()
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided(mat, "NaN")
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided(mat, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

>>> del mat[2][2]
>>> matrix_divided(mat, 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> mat = ()
>>> matrix_divided(mat, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> mat = [[], 10]
>>> matrix_divided(mat, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> mat = [[], ["NaN"]]
>>> matrix_divided(mat, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> mat = [[1], ["NaN"]]
>>> matrix_divided(mat, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
